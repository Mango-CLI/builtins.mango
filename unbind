#!/usr/bin/env python3

"""
unbind

usage: mango @unbind [script_name] (command_name ...)

This is a prebuilt script and is automatically placed in /home/<usr>/.mango,
aka the home mango repo.
It is called to unbind selected or all commands from a script.

If the script does not exist, an error will be raised.
"""

import argparse
import os

from _common import (
    closestMangoRepo,
    unbindScriptAll,
    unbindScriptSelectively
)
from _print_utils import print, fatal_error


def unbind():
    """Unbind selected or all commands from a script"""
    parser = argparse.ArgumentParser(
        description="unbind selected or all commands from a script"
    )
    parser.add_argument(
        "script_name",
        type=str,
        help="the name of the script to unbind commands from"
    )
    parser.add_argument(
        "command_names",
        type=str,
        nargs='*',
        help="the command(s) to unbind from the script"
    )
    args = parser.parse_args()

    # get the current repo
    try:
        current_repo = closestMangoRepo()
    except FileNotFoundError:
        fatal_error("No mango repo found.")

    # get the script path
    script_path = os.path.join(current_repo, '.mango', args.script_name)
    if not os.path.exists(script_path):  # if the script does not exist, then create it
        fatal_error(f"Script '{args.script_name}' does not exist. Maybe you can create it using @add?")

    # insert the bindings into .instructions
    if len(args.command_names) == 0:
        print(
            f"All bindings of script '{args.script_name}' will be removed.",
            color="yellow",
            bold=True
        )
        print(
            "Are you sure you want to continue? (y/N)",
            end=' ',
            color="white"
        )
        if input().lower() != 'y':
            return
        unbindScriptAll(repo_path=current_repo, script_name=args.script_name)
    else:
        print(
            f"Unbinding the following commands from script '{args.script_name}': "
            f"{args.command_names}",
            color="white"
        )
        unbindScriptSelectively(
            repo_path=current_repo,
            script_name=args.script_name,
            command_names=args.command_names
        )


if __name__ == '__main__':
    unbind()
