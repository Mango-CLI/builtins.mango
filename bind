#!/usr/bin/env python3

"""
bind

usage: mango @bind [script_name] [command_name ...] (-f, --force)

This is a prebuilt script and is automatically placed in /home/<usr>/.mango, aka the home mango repo.
It is called to bind one or more commands to a script.

If the script does not exist, an error will be raised. If the command has been registered, an error will be raised.
The latter can be overridden with the -f(--force) flag.
"""

from _common import *

import argparse
import sys, os

def bind():
    parser = argparse.ArgumentParser(description="bind one or more commands to a script")
    parser.add_argument("script_name", type=str, help="the name of the script to bind commands to")
    parser.add_argument("command_names", type=str, nargs='+', help="the command(s) to bind to this script")
    parser.add_argument("-f", "--force", action='store_true', help="force the binding even if the command is already registered (this will create a shadowed binding)")
    args = parser.parse_args()
    
    # get the current repo
    try:
        current_repo = closestMangoRepo()
    except FileNotFoundError:
        print("No mango repo found. (This should already have been thrown though...)")
    
    # get the script path
    script_path = os.path.join(current_repo, '.mango', args.script_name)
    if not os.path.exists(script_path): # if the script does not exist, then create it
        print(f"Sorry, script '{args.script_name}' does not exist. Maybe you can create it using @add ?", color="red", bold=True)
        return
    
    # if any of the bindings have been registered in this repo, and there is no force flag, raise an error
    if not args.force:
        for command in args.command_names:
            if existRegisteredCommand(current_repo, command):
                print(f"Command '{command}' is already registered in this repo. Use -f or --force to force a shadowed binding.", color='red', bold=True)
                return
    
    # insert the bindings into .instructions
    bindCommandsToScript(repo_path=current_repo, script_name=args.script_name, command_names=args.command_names)
    
    print(f"Bound the given commands to script '{args.script_name}'.", color="green")


if __name__ == '__main__':
    bind()