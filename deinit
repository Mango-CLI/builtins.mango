#!/usr/bin/env python3

"""
deinit

usage: mango @deinit [repo_path]

This is a prebuilt script and is automatically placed in /home/<usr>/.mango,
aka the home mango repo.
It is called to delete a mango repo.

When no repo is found at the given path, this script will raise a FileNotFoundError.
"""

import argparse
import os

from _common import existMangoRepo, removeFolderRecursively
from _print_utils import print, fatal_error


def delete_repo(repo_path: str):
    """delete a mango repo

    Keyword arguments:
    - repo_path -- the path to the mango repo to delete
    """

    # Get the directory to delete
    dir_to_del = os.path.abspath(repo_path)
    if not existMangoRepo(dir_to_del):
        fatal_error("Repo not found")

    print("Deleting the mango repo", color='white')
    # Delete the .mango folder
    removeFolderRecursively(os.path.join(dir_to_del, '.mango'))


def delete_():
    """the main function for the delete script
    """

    # Parse the arguments
    parser = argparse.ArgumentParser(description="delete a mango repo")
    parser.add_argument(
        "repo_path",
        type=str,
        help="the path to the mango repo",
        default='.',
        nargs='?'
    )
    args = parser.parse_args()

    if not existMangoRepo(args.repo_path):
        fatal_error(f"The directory {args.repo_path} is not a mango repo.")

    # Delete the repo
    try:
        print(
            f"Are you sure to delete the mango repo at {os.path.abspath(args.repo_path)}? (y/N)",
            end=' ',
            color='yellow',
            bold=True
        )
        if input().lower() != 'y':
            return
        delete_repo(args.repo_path)
    except FileNotFoundError:
        fatal_error(f"The directory {args.repo_path} is not a mango repo.")


if __name__ == '__main__':
    delete_()
