#!/usr/bin/env python3

"""
remove

usage: mango @remove [script_name] (-b, --bindings [binding_name ...]) (-s, --source)

This is a prebuilt script in the builtins submodule. It is shipped with mango and is automatically installed in the user's home mango.

Delete scripts or selectively drop their bindings in the current mango repository. Confirmations are requested before destructive actions.
"""

from _common import (
    closestMangoRepo,
    getRegisteredItems,
    existScript,
    setSourcePolicy,
    ScriptInfo,
    confirmDestructiveAction,
    removeInstructionBindings,
    deleteInstructionEntry,
)
from _cprint import print, fatal_error

import argparse
import os


def remove():
    """Remove a script or its bindings from the active mango repository."""
    parser = argparse.ArgumentParser(
        description="remove a script or its bindings from a mango repository"
    )
    parser.add_argument(
        "script_name", type=str, help="the name of the script to remove"
    )
    parser.add_argument(
        "-b",
        "--bindings",
        type=str,
        nargs="*",
        help="remove bindings only (if no binding names are specified, all bindings will be removed)",
    )
    parser.add_argument(
        "-s",
        "--source",
        action="store_true",
        help="disable source mode but keep the script and bindings",
    )
    args = parser.parse_args()

    if args.bindings is not None and args.source:
        fatal_error("Cannot use -b/--bindings and -s/--source flags together.")

    try:
        current_repo = closestMangoRepo()
    except FileNotFoundError:
        fatal_error("No mango repository found.")

    script_path = os.path.join(current_repo, ".mango", args.script_name)
    # Even if a script does not exist we should still be able to remove it (e.g. when user removes the script first)
    # if not existScript(current_repo, args.script_name):
    #     fatal_error(f"Script '{args.script_name}' does not exist.")

    registered_scripts = getRegisteredItems(current_repo)
    aggregated_bindings: list[str] = []
    source_mode = False
    for script in registered_scripts:
        if script.name() == args.script_name:
            aggregated_bindings.extend(script.bindings)
            if script.source:
                source_mode = True

    deduped_bindings = list(dict.fromkeys(aggregated_bindings))
    script_info = ScriptInfo(
        virtual_submodule_path=[],
        within_submodule_path=args.script_name,
        source=source_mode,
        bindings=deduped_bindings,
    )

    if args.source:
        if not script_info.source:
            print(
                f"Script '{args.script_name}' is already not in source mode.",
                color="yellow",
            )
            return

        if not confirmDestructiveAction(
            prompt=f"Disable source mode for script '{args.script_name}'?",
        ):
            print("Operation cancelled.", color="gray")
            return

        setSourcePolicy(
            mango_repo_path=current_repo,
            script_name=args.script_name,
            use_source=False,
        )
        print(
            f"Source mode disabled for script '{args.script_name}'.",
            color="green",
        )
        return

    if args.bindings is not None:
        if not script_info.bindings:
            print(
                f"Script '{args.script_name}' has no bindings to remove.",
                color="yellow",
            )
            return

        if not args.bindings:
            if not confirmDestructiveAction(
                prompt=f"Remove all bindings from script '{args.script_name}'?",
            ):
                print("Operation cancelled.", color="gray")
                return

            try:
                removeInstructionBindings(
                    mango_repo_path=current_repo,
                    script_name=args.script_name,
                    remove_all=True,
                )
            except ValueError as err:
                fatal_error(str(err))

            print(
                f"All bindings removed from script '{args.script_name}'.",
                color="green",
            )
            return

        selected_bindings = list(dict.fromkeys(args.bindings))
        bindings_list = ", ".join(selected_bindings)

        if not confirmDestructiveAction(
            prompt=f"Remove bindings {bindings_list} from script '{args.script_name}'?",
        ):
            print("Operation cancelled.", color="gray")
            return

        try:
            removeInstructionBindings(
                mango_repo_path=current_repo,
                script_name=args.script_name,
                bindings_to_remove=set(selected_bindings),
            )
        except ValueError as err:
            fatal_error(str(err))

        print(
            f"Bindings {bindings_list} removed from script '{args.script_name}'.",
            color="green",
        )
        return

    bindings_str = ", ".join(script_info.bindings) if script_info.bindings else "none"
    if not confirmDestructiveAction(
        prompt=(
            f"Delete script '{args.script_name}' and its bindings ({bindings_str})?"
        ),
    ):
        print("Operation cancelled.", color="gray")
        return

    try:
        os.remove(script_path)
        print(f"Script file '{args.script_name}' deleted.", color="green")
    except Exception as e:
        print(
            f"Failed to delete script file: {e} from os. Please clean it up yourself.",
            color="yellow",
        )

    bindings_removed = False
    if script_info.bindings:
        try:
            removeInstructionBindings(
                mango_repo_path=current_repo,
                script_name=args.script_name,
                remove_all=True,
            )
        except ValueError as err:
            print(str(err), color="yellow")
        else:
            bindings_removed = True

    if bindings_removed:
        print(
            f"Bindings {', '.join(script_info.bindings)} removed from .instructions.",
            color="green",
        )

    deleteInstructionEntry(mango_repo_path=current_repo, script_name=args.script_name)
    if os.path.exists(os.path.join(current_repo, ".mango", script_info.name())):
        os.remove(os.path.join(current_repo, ".mango", script_info.name()))
    print(f"File '{args.script_name}' removed from OS.", color="green")


if __name__ == "__main__":
    remove()
