#!/usr/bin/env python3

"""
bind

usage: mango @bind (--submodule SUBMODULE_NAME) VISIBLE_ITEM BINDINGS...

This is a prebuilt script in the builtins submodule. It is shipped with mango and is automatically installed in the user's home mango.

This script binds one or more names to a specified item in the visible scope of a mango repository.
"""

from _common import (
    closestMangoRepo,
    getRegisteredItems,
    exportSubmoduleBindings,
    bindToItem,
)
from _tui import uiTypeSelect
from _cprint import print

import argparse
import re

def bind():
    parser = argparse.ArgumentParser(description="bind commands to a visible items in a mango base module")
    parser.add_argument("--submodule", type=str, required=False, help="export bindings from a submodule", default=None)
    parser.add_argument("item", type=str, help="the path to the script to bind or submodule binding to rebind")
    parser.add_argument("bindings", type=str, nargs='*', help="the new bindings given to the script item")
    args = parser.parse_args()

    submodule: str | None = args.submodule
    item: str = args.item
    bindings: list[str] = args.bindings
    
    # Validate the names of the bindings
    for binding in bindings:
        # Validate the binding name
        if not re.match(r"^[A-Za-z_][A-Za-z0-9_]*$", binding):
            print(f"Error: Invalid binding name '{binding}'. Must start with a letter or underscore and contain only letters, digits, or underscores.")
            continue

    # Check for existing bindings
    repo_path = closestMangoRepo()
    existing_scripts = getRegisteredItems(repo_path)
    for binding in bindings:
        for ori_script in existing_scripts:
            if ori_script.isBoundTo(binding):
                result = uiTypeSelect(
                    prompt=f"Binding '{binding}' is already claimed by script '{ori_script.relativeOSPath()}'. Do you want to rebind it to '{item}'? Choose a for 'all'",
                    options=["y", "n", "a"],
                    default_id=0,
                )
                if result == 0: # y
                    continue
                elif result == 1: # n
                    return
                elif result == 2: # a
                    break
    
    # Perform the binding logic: simply prepend to the first line of the script file
    if submodule is None and item == '*':
        if len(bindings) != 0:
            print("Error: When binding to all items in the base module, no specific item should be provided.", color="red")
            exit(1)
        exportSubmoduleBindings(repo_path, bindings)
    else:
        bindToItem(mango_repo_path=repo_path, submodule=submodule, item=item, bindings=bindings)

if __name__ == "__main__":
    bind()