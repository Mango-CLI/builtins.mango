#!/usr/bin/env python3

"""
list

usage: mango @list (repo_path)

This is a prebuilt script and is automatically placed in /home/<usr>/.mango,
aka the home mango repo.
It is called to list all commands invocable by mango, within a mango repo.
In other terms, it is a quick way to list and observe the .instructions file in any repo.

If repo_path is not provided, the program will search from . and find the closest one.
"""

import argparse
import os

from _common import closestMangoRepo, isMangoRepo, getRegisteredItems
from _cprint import print


def get_active_repo(search_starting_point) -> str:
    search_starting_point = os.path.abspath(search_starting_point)
    if not isMangoRepo(search_starting_point):
        print(
            f"{os.path.abspath(search_starting_point)} is not a mango repo. Moving up!",
            color="yellow"
        )
    repo_path = closestMangoRepo(starting_dir=search_starting_point)
    repo_path = os.path.abspath(repo_path) if repo_path else None
    if repo_path is None:
        print("No mango repo found!", color="red")
        exit(1)
    return repo_path


def get_submodule_path(repo_path: str, submodule: str) -> str:
    """Get the path to a submodule in a mango repo"""
    # submodule_path = os.path.join(repo_path, '.mango', '.submodules', submodule)
    try:
        from _common import mapSubmodulePath
        submodule_path = mapSubmodulePath(submodule, base_path=repo_path, absolute=True)
        return submodule_path
    except FileNotFoundError:
        print(f"Submodule {submodule} does not exist in repo {repo_path}! Exiting...", color="red")
        exit(1)


def list_commands(repo_path: str):
    """List all commands in a mango repo"""
    
    def list_commands_in_module(mango_repo_path: str):
        """List all commands in a module"""
        
        print("Script\tCommands", color="cyan", bold=True)
        items = getRegisteredItems(mango_repo_path)
        for item in items:
            item_name = item.name()
            item_color = "green" if item.source else "yellow"
            print(item_name, color=item_color, end='\t')
            print(' '.join(item.bindings), color="white", end='\t')
            if len(item.virtual_submodule_path) > 0:
                source = ':'.join(item.virtual_submodule_path)
                print(f"(from {source})", color="gray")
            else:
                print('')

    # print out all the commands
    print(f"Listing commands in repo: {repo_path}")
    print('')
    list_commands_in_module(repo_path)
    print('')

    # print out all the submodules
    submodules_path = os.path.join(repo_path, '.mango', '.submodules')
    if os.path.isdir(submodules_path):
        submodules = os.listdir(submodules_path)
        if len(submodules) > 0:
            print(f"Submodules in repo: {repo_path}", color="cyan", bold=True)
            for submodule in submodules:
                print("â†’ ", color="white", bold=True, end='')
                print(f"{submodule}", color="yellow")
            print('')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="list all commands in a repo")
    parser.add_argument(
        "repo_path",
        type=str,
        nargs='?',
        default='.',
        help="the path to the mango repo (if not specified, the current directory "
             "will be used as trace starting point)"
    )
    parser.add_argument(
        "--submodule",
        type=str,
        help="the submodule to list commands from (if not specified, no submodule "
             "will be used)",
        default=None
    )
    args = parser.parse_args()

    active_repo = get_active_repo(args.repo_path)
    if args.submodule:
        submodule_path = get_submodule_path(active_repo, args.submodule)
        list_commands(submodule_path)
    else:
        list_commands(os.path.abspath(active_repo))
